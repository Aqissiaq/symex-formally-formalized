@inproceedings{schemmel2020symbolic,
  title={Symbolic partial-order execution for testing multi-threaded programs},
  author={Schemmel, Daniel and B{\"u}ning, Julian and Rodr{\'\i}guez, C{\'e}sar and Laprell, David and Wehrle, Klaus},
  booktitle={International Conference on Computer Aided Verification},
  pages={376--400},
  year={2020},
  organization={Springer}
}

@article{baldoni2018survey,
  title={A survey of symbolic execution techniques},
  author={Baldoni, Roberto and Coppa, Emilio and D’elia, Daniele Cono and Demetrescu, Camil and Finocchi, Irene},
  journal={ACM Computing Surveys (CSUR)},
  volume={51},
  number={3},
  pages={1--39},
  year={2018},
  publisher={ACM New York, NY, USA}
}

@inproceedings{cousot1977abstract,
  title={Abstract interpretation: a unified lattice model for static analysis of programs by construction or approximation of fixpoints},
  author={Cousot, Patrick and Cousot, Radhia},
  booktitle={Proceedings of the 4th ACM SIGACT-SIGPLAN symposium on Principles of programming languages},
  pages={238--252},
  year={1977}
}

@article{king1976symbolic,
  title={Symbolic execution and program testing},
  author={King, James C},
  journal={Communications of the ACM},
  volume={19},
  number={7},
  pages={385--394},
  year={1976},
  publisher={ACM New York, NY, USA}
}

@article{katz1975towards,
  title={Towards automatic debugging of programs},
  author={Katz, Shmuel and Manna, Zohar},
  journal={ACM SIGPLAN Notices},
  volume={10},
  number={6},
  pages={143--155},
  year={1975},
  publisher={ACM New York, NY, USA}
}

@article{boyer1975select,
  title={SELECT—a formal system for testing and debugging programs by symbolic execution},
  author={Boyer, Robert S and Elspas, Bernard and Levitt, Karl N},
  journal={ACM SigPlan Notices},
  volume={10},
  number={6},
  pages={234--245},
  year={1975},
  publisher={ACM New York, NY, USA}
}

@inproceedings{bubel2008abstract,
  title={Abstract interpretation of symbolic execution with explicit state updates},
  author={Bubel, Richard and H{\"a}hnle, Reiner and Wei{\ss}, Benjamin},
  booktitle={International Symposium on Formal Methods for Components and Objects},
  pages={247--277},
  year={2008},
  organization={Springer}
}

@inproceedings{hansen2009state,
  title={State joining and splitting for the symbolic execution of binaries},
  author={Hansen, Trevor and Schachte, Peter and S{\o}ndergaard, Harald},
  booktitle={International Workshop on Runtime Verification},
  pages={76--92},
  year={2009},
  organization={Springer}
}

@article{kneuper1991symbolic,
  title={Symbolic execution: a semantic approach},
  author={Kneuper, Ralf},
  journal={Science of computer programming},
  volume={16},
  number={3},
  pages={207--249},
  year={1991},
  publisher={Elsevier}
}

@inproceedings{peled1993all,
  title={All from one, one for all: on model checking using representatives},
  author={Peled, Doron},
  booktitle={International Conference on Computer Aided Verification},
  pages={409--423},
  year={1993},
  organization={Springer}
}

@inproceedings{scheurer2016general,
  title={A general lattice model for merging symbolic execution branches},
  author={Scheurer, Dominic and H{\"a}hnle, Reiner and Bubel, Richard},
  booktitle={International Conference on Formal Engineering Methods},
  pages={57--73},
  year={2016},
  organization={Springer}
}

% The KeY book
@article{ahrendt2016deductive,
  title={Deductive software verification-the key book},
  author={Ahrendt, Wolfgang and Beckert, Bernhard and Bubel, Richard and H{\"a}hnle, Reiner and Schmitt, Peter H and Ulbrich, Mattias},
  journal={Lecture notes in computer science},
  volume={10001},
  year={2016},
  publisher={Springer}
}

@incollection{boer2020sympaths,
  title={SymPaths: Symbolic Execution Meets Partial Order Reduction},
  author={Boer, Frank S de and Bonsangue, Marcello and Johnsen, Einar Broch and Pun, Violet Ka I and Tapia Tarifa, S Lizeth and Tveito, Lars},
  booktitle={Deductive Software Verification: Future Perspectives},
  pages={313--338},
  year={2020},
  publisher={Springer}
}

% in particular ch.3 presents a theory of SE
@phdthesis{steinhofel2020abstract,
  title={Abstract execution: automatically proving infinitely many programs},
  author={Steinh{\"o}fel, Dominic},
  year={2020},
  school={Technische Universit{\"a}t}
}

@inproceedings{arusoaie2013generic,
  title={A generic framework for symbolic execution},
  author={Arusoaie, Andrei and Lucanu, Dorel and Rusu, Vlad},
  booktitle={International Conference on Software Language Engineering},
  pages={281--301},
  year={2013},
  organization={Springer}
}
@inproceedings{kamburjan2019behavioral,
  title={Behavioral program logic},
  author={Kamburjan, Eduard},
  booktitle={International Conference on Automated Reasoning with Analytic Tableaux and Related Methods},
  pages={391--408},
  year={2019},
  organization={Springer}
}

@article{kamburjan2021crowbar,
  title={Crowbar: behavioral symbolic execution for deductive verification of active objects},
  author={Kamburjan, Eduard and Scaletta, Marco and Rollshausen, Nils},
  journal={arXiv preprint arXiv:2102.10127},
  year={2021}
}

@article{boer2021,
  title={Symbolic execution formally explained},
  author={de Boer, Frank S and Bonsangue, Marcello},
  journal={Formal Aspects of Computing},
  volume={33},
  number={4},
  pages={617--636},
  year={2021},
  publisher={Springer}
}

% Proof system for ABS
@Inbook{kamburjan2020,
author="Kamburjan, Eduard
and Din, Crystal Chang
and H{\"a}hnle, Reiner
and Johnsen, Einar Broch",
editor="Ahrendt, Wolfgang
and Beckert, Bernhard
and Bubel, Richard
and H{\"a}hnle, Reiner
and Ulbrich, Mattias",
title="Behavioral Contracts for Cooperative Scheduling",
bookTitle="Deductive Software Verification: Future Perspectives: Reflections on the Occasion of 20 Years of KeY",
year="2020",
publisher="Springer International Publishing",
address="Cham",
pages="85--121",
abstract="Formal specification of multi-threaded programs is notoriously hard, because thread execution may be preempted at any point. In contrast, abstract concurrency models such as actors seriously restrict concurrency to obtain race-free programs. Languages with cooperative scheduling occupy a middle ground between these extremes by explicit scheduling points. We introduce cooperative contracts, a contract-based specification approach designed for cooperative scheduling. It permits to specify complex concurrent behavior succinctly. Cooperative contracts are formalized as behavioral contracts in a compositional behavioral program logic in which they can be formally verified.",
isbn="978-3-030-64354-6",
doi="10.1007/978-3-030-64354-6_4",
url="https://doi.org/10.1007/978-3-030-64354-6_4"
}

% Non-wellfounded, labelled proof system
@InProceedings{docherty2019,
author="Docherty, Simon
and Rowe, Reuben N. S.",
editor="Cerrito, Serenella
and Popescu, Andrei",
title="A Non-wellfounded, Labelled Proof System for Propositional Dynamic Logic",
booktitle="Automated Reasoning with Analytic Tableaux and Related Methods",
year="2019",
publisher="Springer International Publishing",
address="Cham",
pages="335--352",
abstract="We define an infinitary labelled sequent calculus for PDL, {\$}{\$}{\backslash}mathbf {\{}G3PDL{\}}^{\{}{\backslash}infty {\}}{\$}{\$}. A finitarily representable cyclic system, {\$}{\$}{\backslash}mathbf {\{}G3PDL{\}}^{\{}{\backslash}omega {\}}{\$}{\$}, is then given. We show that both are sound and complete with respect to standard models of PDL and, further, that {\$}{\$}{\backslash}mathbf {\{}G3PDL{\}}^{\{}{\backslash}infty {\}}{\$}{\$}is cut-free complete. We additionally investigate proof-search strategies in the cyclic system for the fragment of PDL without tests.",
isbn="978-3-030-29026-9"
}

% Loop invariant inference
@Inbook{hähnle2016,
author="H{\"a}hnle, Reiner
and Wasser, Nathan
and Bubel, Richard",
editor="{\'A}brah{\'a}m, Erika
and Bonsangue, Marcello
and Johnsen, Einar Broch",
title="Array Abstraction with Symbolic Pivots",
bookTitle="Theory and Practice of Formal Methods: Essays Dedicated to Frank de Boer on the Occasion of His 60th Birthday",
year="2016",
publisher="Springer International Publishing",
address="Cham",
pages="104--121",
abstract="We present a novel approach to automatically generate invariants for loops manipulating arrays. The intention is to achieve formal verification of programs over arrays without the need for user-specified loop invariants. Many loops iterate and manipulate collections. Finding useful, i.e., sufficiently precise invariants for those loops is a challenging task, in particular, if the iteration order is complex. Our approach partitions an array and provides an abstraction for each of these partitions. Symbolic pivot elements are used to compute the partitions. In addition we integrate a faithful and precise program logic for sequential (Java) programs with abstract interpretation using an extensible multi-layered framework to compute array invariants. The presented approach has been implemented. Results of experiments are reported.",
isbn="978-3-319-30734-3",
doi="10.1007/978-3-319-30734-3_9",
url="https://doi.org/10.1007/978-3-319-30734-3_9"
}

% Original PDL
@article{fischer1979,
title = {Propositional dynamic logic of regular programs},
journal = {Journal of Computer and System Sciences},
volume = {18},
number = {2},
pages = {194-211},
year = {1979},
issn = {0022-0000},
doi = {https://doi.org/10.1016/0022-0000(79)90046-1},
url = {https://www.sciencedirect.com/science/article/pii/0022000079900461},
author = {Michael J. Fischer and Richard E. Ladner},
abstract = {We introduce a fundamental propositional logical system based on modal logic for describing correctness, termination and equivalence of programs. We define a formal syntax and semantics for the propositional dynamic logic of regular programs and give several consequences of the definition. Principal conclusions are that deciding satisfiability of length n formulas requires time dn/logn for some d > 1, and that satisfiability can be decided in nondeterministic time cn for some c. We provide applications of the decision procedure to regular expressions, Ianov schemes, and classical systems of modal logic.}
}

@misc{agda,
  author={Norell, Ulf and Danielsson, Nils Anders and Cockx, Jesper and Abel, Andreas},
  title={Agda},
  publisher={Chalmers and Gothenburg University},
  year={2022},
  url={https://wiki.portal.chalmers.se/agda/pmwiki.php}
}

@misc{isabelle,
  author={Naraschewski, Wolfgang and Nipkow, Tobias},
  title={Isabelle/HOL},
  year={2020},
  url={http://www.cl.cam.ac.uk/research/hvg/Isabelle/}
}

@book{coq,
  title={Interactive theorem proving and program development: Coq’Art: the calculus of inductive constructions},
  author={Bertot, Yves and Cast{\'e}ran, Pierre},
  year={2013},
  publisher={Springer Science \& Business Media}
}

@article{NENT2016,
  title={Guidelines for Research Ethics in Science and Technology},
  author={Mikkelsen, {\O}yvind and Hartvigsen, Steinar Heldal and Hauge, Kjellrun Hiis and Nordenson, Svein and Nordtveit, Ernst and Nydal, Rune and van der Velden, Maja and Sk{\aa}re, Janneche Utne and Viste, Rannveig and {\O}vre{\aa}s, Lise and others},
  journal={Jahrbuch f{\"u}r Wissenschaft und Ethik journal},
  volume={1},
  number={02},
  pages={0021--2017},
  year={2016}
}

@inproceedings{fragoso2020gillian,
  title={Gillian, part i: a multi-language platform for symbolic execution},
  author={Fragoso Santos, Jos{\'e} and Maksimovi{\'c}, Petar and Ayoun, Sacha-{\'E}lie and Gardner, Philippa},
  booktitle={Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation},
  pages={927--942},
  year={2020}
}

@article{din2022lagc,
  title={LAGC Semantics of Concurrent Programming Languages},
  author={Din, Crystal Chang and H{\"a}hnle, Reiner and Henrio, Ludovic and Johnsen, Einar Broch and Pun, Violet Ka I and Tarifa, Silvia Lizeth Tapia},
  journal={arXiv preprint arXiv:2202.12195},
  year={2022}
}

@article{heidler2022mechanization,
  title={Mechanization of LAGC Semantics in Isabelle},
  author={Heidler, Niklas},
  journal={arXiv preprint arXiv:2202.08017},
  year={2022}
}
